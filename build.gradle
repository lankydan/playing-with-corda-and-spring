buildscript {
    ext.corda_release_group = 'net.corda'
//    ext.corda_release_version = 'corda-3.0'
    ext.corda_release_version = '3.1-corda'
    ext.corda_gradle_plugins_version = '3.0.9'
//    ext.kotlin_version = '1.1.60'
    ext.kotlin_version = '1.2.20'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'
    ext.spring_boot_version = '1.5.7.RELEASE'
//    ext.spring_boot_version = '1.5.12.RELEASE'
    ext.spring_version = '4.3.11.RELEASE'
//    ext.spring_version = '4.3.16.RELEASE'
    //    ext.spring_boot_version = '2.0.0.RELEASE'
    //    ext.spring_version = '5.0.0.RELEASE'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // added from one of the other example projects
    //    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    //    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile("$corda_release_group:corda-webserver-impl:$corda_release_version") {
        exclude group: 'org.eclipse.jetty', module: 'jetty-webapp'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'
        exclude group: 'org.eclipse.jetty', module: 'jersey-container-jetty-http'
        exclude group: 'org.eclipse.jetty', module: 'jetty-continuation'
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-jetty-http'
    }

    //    cordaRuntime "$corda_release_group:corda:$corda_release_version"
//    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    testCompile "$corda_release_group:corda-test-utils:$corda_release_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    cordapp "$corda_release_group:corda-finance:$corda_release_version"

    compile("org.springframework.boot:spring-boot-starter-tomcat:$spring_boot_version")
//    compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version") {
//        //        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
//        exclude group: 'org.slf4j', module: 'slf4j'
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
//        exclude group: 'ch.qos.logback', module: 'logback-classic'
//    }
//    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
////        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
//        exclude group: 'org.slf4j', module: 'slf4j'
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
//        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
//        exclude group: 'ch.qos.logback', module: 'logback-classic'
//    }
//    compile group: 'org.springframework', name: 'spring-messaging', version: '4.2.4.RELEASE'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.11.0'
//    compile("org.webjars:stomp-websocket:2.3.3")
//    compile group: 'org.webjars', name: 'webjars-locator-core', version: '0.35'

//    compile("org.webjars:sockjs-client:1.0.2")
//    compile("org.webjars:bootstrap:3.3.7")
//    compile("org.webjars:jquery:3.1.0")

    cordapp project(":cordapp")
    cordapp project(":cordapp-contracts-states")
}

//jar {
//    baseName = 'gs-messaging-stomp-websocket'
//    version = '0.1.0'
//}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10001
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10045")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
//        net.corda.plugins.Node.configFileProperty="C:/dev/projects/corda_projects/playing-with-corda-and-spring/src/main/resources/general-node.conf"
//        configFile = "C:/dev/projects/corda_projects/playing-with-corda-and-spring/src/main/resources/general-node.conf"
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10002
//    webPort 10007
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
//        configFile = "C:/dev/projects/corda_projects/playing-with-corda-and-spring/src/main/resources/general-node.conf"
    }
    node {
        name "O=PartyB,L=London,C=GB"
        p2pPort 10003
//    webPort 10018
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
//        configFile = "C:/dev/projects/corda_projects/playing-with-corda-and-spring/src/main/resources/general-node.conf"
    }
}

task runPartyAServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.server.ServerKt'
    environment "server.port", "10011"
    environment "config.rpc.username", "user1"
    environment "config.rpc.password", "test"
    environment "config.rpc.host", "localhost"
    environment "config.rpc.port", "10006"
}

task runPartyBServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.server.ServerKt'
    environment "server.port", "10012"
    environment "config.rpc.username", "user1"
    environment "config.rpc.password", "test"
    environment "config.rpc.host", "localhost"
    environment "config.rpc.port", "10009"
}